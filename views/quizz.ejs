<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Tailwind -->
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <!-- Import police -->
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
      rel="stylesheet"
    />
    <title>LSF ‚Äî Quizz</title>
    <style>
      :root {
        --brand: #f46b5e;
        --teal: #00a8a3;
        --bg: #fcf6f0;
        --ink: #2b2b2b;
      }
      body {
        background: var(--bg);
        color: var(--ink);
        font-family: "Open Sans", sans-serif, system-ui, -apple-system, Segoe UI,
          Roboto, Arial;
      }
    </style>
  </head>
  <body>
    <!-- Barre de navigation -->
    <nav
      class="sticky top-0 z-50 backdrop-blur bg-[#f46b5e]/95 text-white shadow"
    >
      <div class="mx-auto max-w-7xl px-4 py-1">
        <div class="flex h-14 items-center justify-between">
          <!-- Logo / Titre -->
          <h1 class="text-lg md:text-xl font-bold">
            <a href="/" class="hover:text-white/80"
              >Langue des Signes Fran√ßaise</a
            >
          </h1>

          <!-- Liens Desktop -->
          <ul class="hidden items-center gap-6 text-sm md:flex">
            <li><a href="/" class="hover:opacity-90">Accueil</a></li>
            <li>
              <a href="/dictionnaire" class="hover:opacity-90">Dictionnaire</a>
            </li>
            <li><a href="/quizz" class="hover:opacity-90">Quizz</a></li>
            <li>
              <a href="/ressources" class="hover:opacity-90">Ressources</a>
            </li>
          </ul>

          <!-- Menu Mobile (details/summary) -->
          <details class="relative md:hidden group">
            <summary
              class="list-none cursor-pointer inline-flex h-9 w-9 items-center justify-center rounded-lg bg-white/15 hover:bg-white/25"
              aria-label="Ouvrir le menu"
            >
              <!-- Ic√¥ne burger -->
              <svg
                class="h-5 w-5 group-open:hidden"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16M4 18h16"
                />
              </svg>
              <!-- Ic√¥ne quand open -->
              <svg
                class="hidden h-5 w-5 group-open:block"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </summary>

            <!-- Dropdown Mobile -->
            <div
              class="absolute right-0 mt-2 w-56 rounded-xl bg-[#f46b5e] shadow-lg ring-1 ring-black/10"
            >
              <ul class="grid gap-1 p-2 text-sm">
                <li>
                  <a href="/" class="block rounded px-3 py-2 hover:bg-white/10"
                    >Accueil</a
                  >
                </li>
                <li>
                  <a
                    href="/dictionnaire"
                    class="block rounded px-3 py-2 hover:bg-white/10"
                    >Dictionnaire</a
                  >
                </li>
                <li>
                  <a
                    href="/quizz"
                    class="block rounded px-3 py-2 hover:bg-white/10"
                    >Quizz</a
                  >
                </li>
                <li>
                  <a
                    href="/ressources"
                    class="block rounded px-3 py-2 hover:bg-white/10"
                    >Ressources</a
                  >
                </li>
              </ul>
            </div>
          </details>
        </div>
      </div>
    </nav>

    <!-- HEADER -->
    <header class="max-w-5xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-extrabold">üñêÔ∏è Quizz de reconnaissance ‚Äî LSF</h1>
      <p class="mt-1 text-neutral-700 text-sm">
        Regarde le signe (vid√©o/image), puis √©cris la signification ou choisis
        la bonne r√©ponse.
      </p>
    </header>

    <!-- QUIZZ -->
    <main class="max-w-5xl mx-auto px-4 pb-16">
      <div class="grid md:grid-cols-2 gap-6">
        <% questions.forEach((q, idx)=>{ %>
        <section
          class="rounded-2xl border bg-white p-4 shadow"
          data-qid="<%= q.id %>"
        >
          <header class="mb-3">
            <h2 class="font-semibold text-[color:var(--brand)]">
              Question <%= idx + 1 %>
            </h2>
          </header>

          <!-- Media -->
          <div class="rounded-xl overflow-hidden border bg-black/5">
            <% if (q.mediaType === "video") { %>
            <video
              class="w-full aspect-video"
              src="<%= q.src %>"
              controls
              preload="metadata"
            ></video>
            <% } else { %>
            <img class="w-full" src="<%= q.src %>" alt="Signe LSF" />
            <% } %>
          </div>

          <!-- R√©ponse -->
          <div class="mt-4">
            <% if (q.mode === "input") { %>
            <label class="block text-sm text-neutral-700 mb-1"
              >Ta r√©ponse :</label
            >
            <input
              type="text"
              class="ansInput w-full rounded-lg border px-3 py-2"
              placeholder="√âcris le mot (ex: bonjour)"
            />
            <% } else { %>
            <fieldset class="grid gap-2">
              <% q.choices.forEach((ch, ci)=>{ %>
              <label
                class="flex items-center gap-2 rounded-lg border px-3 py-2 hover:bg-neutral-50 cursor-pointer"
              >
                <input
                  type="radio"
                  class="ansChoice h-4 w-4"
                  name="q-<%= q.id %>"
                  value="<%= ci %>"
                />
                <span><%= ch %></span>
              </label>
              <% }) %>
            </fieldset>
            <% } %>
          </div>

          <!-- Actions -->
          <div class="mt-4 flex items-center gap-3">
            <button
              class="btnCheck rounded-lg bg-[color:var(--teal)] px-4 py-2 text-white text-sm font-semibold hover:bg-[#00928e]"
            >
              V√©rifier
            </button>
            <button
              class="btnReset rounded-lg border px-3 py-2 text-sm bg-white hover:border-[color:var(--teal)]"
            >
              Effacer
            </button>
            <span class="ml-auto text-xs text-neutral-500"
              >Indice apr√®s correction</span
            >
          </div>

          <!-- R√©sultat -->
          <p class="mt-3 hidden text-sm font-medium" data-exp></p>

          <!-- Donn√©es cach√©es pour simplifier le JS -->
          <script type="application/json" data-qdata>
            <%- JSON.stringify(q) %>
          </script>
        </section>
        <% }) %>
      </div>

      <!-- Score global -->
      <div
        class="mt-8 rounded-2xl border bg-white p-4 shadow flex items-center justify-between"
      >
        <p class="text-sm">
          Score : <strong id="score">0 / <%= questions.length %></strong>
        </p>
        <button
          id="btnResetAll"
          class="rounded-lg border px-4 py-2 bg-white hover:border-[color:var(--teal)] text-sm"
        >
          Tout recommencer
        </button>
      </div>
    </main>

    <script>
      // Petit utilitaire
      const norm = (s) =>
        (s || "")
          .toString()
          .trim()
          .toLowerCase()
          .normalize("NFD")
          .replace(/[\u0300-\u036f]/g, ""); // supprime accents

      const cards = Array.from(document.querySelectorAll("section[data-qid]"));
      let score = 0,
        total = cards.length;

      function updateScore() {
        document.getElementById("score").textContent = score + " / " + total;
      }

      cards.forEach((card) => {
        const q = JSON.parse(
          card.querySelector("script[data-qdata]").textContent
        );
        const exp = card.querySelector("[data-exp]");
        const btnCheck = card.querySelector(".btnCheck");
        const btnReset = card.querySelector(".btnReset");

        let validated = false; // pour ne pas compter 2x au score

        btnCheck.addEventListener("click", () => {
          // reset styles basiques
          exp.classList.add("hidden");
          exp.textContent = "";

          let ok = false;

          if (q.mode === "input") {
            const input = card.querySelector(".ansInput");
            const val = norm(input.value);
            const good = norm(q.answer);
            const accepted = (q.accepted || []).map(norm);
            ok = val === good || accepted.includes(val);

            input.classList.remove(
              "ring-2",
              "ring-red-300",
              "ring-green-300",
              "bg-red-50",
              "bg-green-50"
            );
            input.classList.add(
              ok ? "ring-green-300" : "ring-red-300",
              ok ? "bg-green-50" : "bg-red-50",
              "ring-2"
            );
          } else {
            const picked = card.querySelector("input.ansChoice:checked");
            const labels = Array.from(card.querySelectorAll("label"));
            labels.forEach((l) =>
              l.classList.remove(
                "ring-2",
                "ring-red-300",
                "ring-green-300",
                "bg-red-50",
                "bg-green-50"
              )
            );

            if (!picked) {
              exp.textContent = "Choisis une r√©ponse.";
              exp.classList.remove("hidden");
              return;
            }
            const idx = parseInt(picked.value, 10);
            ok = idx === q.answerIndex;

            if (ok) {
              picked
                .closest("label")
                .classList.add("ring-2", "ring-green-300", "bg-green-50");
            } else {
              picked
                .closest("label")
                .classList.add("ring-2", "ring-red-300", "bg-red-50");
              const good = card
                .querySelector('input.ansChoice[value="' + q.answerIndex + '"]')
                .closest("label");
              good.classList.add("ring-2", "ring-green-300", "bg-green-50");
            }
          }

          // Explication / indice
          exp.textContent =
            (ok ? "‚úÖ Correct !" : "‚ùå Incorrect.") +
            (q.tip ? " ‚Äî Indice : " + q.tip : "");
          exp.classList.remove("hidden");
          exp.classList.toggle("text-green-700", ok);
          exp.classList.toggle("text-red-700", !ok);

          if (ok && !validated) {
            validated = true;
            score++;
            updateScore();
          }
        });

        btnReset.addEventListener("click", () => {
          // R√©initialiser la carte uniquement
          exp.classList.add("hidden");
          exp.textContent = "";
          validated = false;
          if (q.mode === "input") {
            const input = card.querySelector(".ansInput");
            input.value = "";
            input.classList.remove(
              "ring-2",
              "ring-red-300",
              "ring-green-300",
              "bg-red-50",
              "bg-green-50"
            );
          } else {
            const picked = card.querySelector("input.ansChoice:checked");
            picked && (picked.checked = false);
            const labels = Array.from(card.querySelectorAll("label"));
            labels.forEach((l) =>
              l.classList.remove(
                "ring-2",
                "ring-red-300",
                "ring-green-300",
                "bg-red-50",
                "bg-green-50"
              )
            );
          }
        });
      });

      document.getElementById("btnResetAll").addEventListener("click", () => {
        // Reset global (visuel + score)
        cards.forEach((card) => {
          card.querySelector(".btnReset").click();
        });
        score = 0;
        updateScore();
        window.scrollTo({ top: 0, behavior: "smooth" });
      });

      updateScore();
    </script>
  </body>
</html>
